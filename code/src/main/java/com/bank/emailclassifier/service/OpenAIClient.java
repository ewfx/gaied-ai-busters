package com.bank.emailclassifier.service;

import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class OpenAIClient implements LLMClient {
    private static final Logger log = LoggerFactory.getLogger(OpenAIClient.class);
    private final String apiKey;
    // TODO : Externalize the endpoint to a configuration file
    private final String endpoint = "https://api.openai.com/v1/chat/completions";

    public OpenAIClient(String apiKey) {
        this.apiKey = apiKey;
        if (apiKey == null || apiKey.trim().isEmpty()) {
            throw new IllegalArgumentException("OpenAI API key cannot be null or empty.");
        }
    }

    @Override
    public String classifyEmail(String prompt) {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost post = new HttpPost(endpoint);
            post.setHeader("Authorization", "Bearer " + apiKey);
            post.setHeader("Content-Type", "application/json");

            // Escape special characters in the prompt
            String escapedPrompt = prompt.replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "\\r");

            // Construct the payload with system and user messages
            String json = String.format(
                    "{\"model\": \"gpt-4\", \"messages\": [{\"role\": \"system\", \"content\": \"You are an expert AI assistant specializing in email classification for a commercial bank's lending services team.\"}, {\"role\": \"user\", \"content\": \"%s\"}], \"max_tokens\": 500}",
                    escapedPrompt);

            log.info("Request to OpenAI: {}", json);
            post.setEntity(new StringEntity(json));

            // Execute the request and get the response
            String response = client.execute(post, httpResponse -> {
                int statusCode = httpResponse.getStatusLine().getStatusCode();
                String responseBody = EntityUtils.toString(httpResponse.getEntity());
                if (statusCode >= 200 && statusCode < 300) {
                    return responseBody;
                } else {
                    log.error("OpenAI API returned status code: {}", statusCode);
                    log.error("OpenAI API response body: {}", responseBody);
                    throw new RuntimeException("OpenAI API returned non-success status code: " + statusCode);
                }
            });

            // Parse the JSON response to extract the content
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(response);

            // Check if the 'choices' array exists and is not empty
            JsonNode choices = root.path("choices");
            if (!choices.isArray() || choices.isEmpty()) {
                log.error("Invalid response format: 'choices' array is missing or empty.");
                log.error("Response: {}", response);
                throw new RuntimeException(
                        "Invalid response format from OpenAI API: 'choices' array is missing or empty.");
            }

            // Check if the first element in 'choices' has a 'message' and 'content'
            JsonNode firstChoice = choices.get(0);
            if (firstChoice == null || !firstChoice.has("message") || !firstChoice.get("message").has("content")) {
                log.error("Invalid response format: 'message' or 'content' is missing in the first choice.");
                log.error("Response: {}", response);
                throw new RuntimeException(
                        "Invalid response format from OpenAI API: 'message' or 'content' is missing in the first choice.");
            }

            String content = firstChoice.path("message").path("content").asText();

            return content; // Returns the JSON string generated by the LLM

        } catch (Exception e) {
            log.error("Failed to call OpenAI API", e);
            throw new RuntimeException("Failed to call OpenAI API", e);
        }
    }
}
